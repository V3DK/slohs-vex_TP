#pragma config(Sensor, in1,    gyro,           sensorGyro)
#pragma config(Sensor, dgtl1,  rightDrive,     sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  leftDrive,      sensorQuadEncoder)
#pragma config(Sensor, dgtl5,  liftE,          sensorQuadEncoder)
#pragma config(Motor,  port1,           backRight,     tmotorVex393HighSpeed_HBridge, openLoop, reversed)
#pragma config(Motor,  port2,           middleRight,   tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           frontRight,    tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port4,           lift,          tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port5,           puncher,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           roller,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           wrist,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           frontLeft,     tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port9,           middleLeft,    tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port10,          backLeft,      tmotorVex393HighSpeed_HBridge, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks
  // running between Autonomous and Driver controlled modes. You will need to
  // manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{
  
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/
void driveTrain(){
	motor[frontLeft] = vexRT[Ch3];
	motor[middleLeft] = vexRT[Ch3];
	motor[backLeft] = vexRT[Ch3];
	
	motor[frontRight] = vexRT[Ch2];
	motor[middleRight] = vexRT[Ch2];
	motor[backRight] = vexRT[Ch2];
}
void rollerMove(){
	if(vexRT[Btn6U] == 1) {
		motor[roller] = 127;
		} else if(vexRT[Btn6D] == 1) {
		motor[roller] = -127;
		} else {
		motor[roller] = 0;
	}
}
void wristMove(){
	if(vexRT[Btn8UXmtr2] == 1) {
		motor[wrist] = -40;
		} else if(vexRT[Btn8DXmtr2] == 1) {
		motor[wrist] = 40;
		} else {
		motor[wrist] = 0;
	}
}
void mainLift(){
	if(vexRT[Btn6DXmtr2] == 1) {
		motor[lift] = 127;
		} else if(vexRT[Btn6UXmtr2] == 1) {
		motor[lift] = -100;
		} else {
		motor[lift] = 0;
	}
}
void puncherMove(){
	if(vexRT[Btn7UXmtr2] == 1) {
		motor[puncher] = 127;
		} else if(vexRT[Btn7DXmtr2] == 1) {
		motor[puncher] = -127;
		} else {
		motor[puncher] = 0;
	}
}

void clearDrive(){
	SensorValue[leftDrive] = 0;
	SensorValue[rightDrive] = 0;
}

void clearOthers(){
	SensorValue[liftE] = 0;
}

void clearAll(){
	clearDrive();
	clearOthers();
}

void regularRemote(){
	driveTrain();
	rollerMove();
	wristMove();
	mainLift();
	puncherMove();
}




task usercontrol()
{
 
  while (true)
  {
clearAll();
	while (true) {
		//Main Controls for Everything
		regularRemote();
		clearLCDLine(0);
		clearLCDLine(1);

		if(true){

			displayLCDString(0, 0, "G ");
			displayLCDNumber(0, 2, SensorValue[gyro]);
			
			displayLCDString(0, 7, "RD ");
			displayLCDNumber(0, 10, SensorValue[rightDrive]);

			displayLCDString(1, 0, "LD ");
			displayLCDNumber(1, 3, SensorValue[leftDrive]);
			
			
			displayLCDString(1, 7, "L ");
			displayLCDNumber(1, 9, SensorValue[lift]);
		}
		else {
			displayLCDCenteredString(0, "User");
			displayLCDCenteredString(1, "Control");

		}
  }
}
}