 #include "robot-config.h"

//Creates a competition object that allows access to Competition methods.
vex::competition    Competition;

/*--------------------------------------------------------------------------
Joysticks - Tank Control
Left - Drive Lock

Displays Drive Mode on Controller

Flags: 
Joystick - Intake Side as Forward
R2 - Puncher Trigger [Once pressed, runs task to run puncher 360 degrees]
R1 - Puncher Ratchet [Once pressed, runs task to run puncher 180 degrees]
Up - Toggle for High/Medium Angle-Adjusting
Right - Toggle for High/Low Angle-Adjusting
L2 - Intake In
L1 - Intake Out


Caps:
A - Reset Lift Down
B - Lift Down [Manual Contro]
X - Lift Up [Manual Contro]
Y - Medium Lift Hold

--------------------------------------------------------------------------*/

int maxSpeed = 100;
int trevo = 0;
int joyVal = 0;

int pLastVal = 0;

//used to calculate driving distances in auton
float math_Pi = 3.1415926535897932384626433;

bool autoRunning = false;
/*
if 0 - down (high flag)
if 1 - middle (medium flag)
if 2 - up (low flag)
*/
int anglePos = 0;
bool angleTrigger = false;

bool driveLockOn = false;

bool liftReset = false;
bool liftMedium = false;
bool liftOn = false;
bool liftUp = false;

bool pLoaded = false;

//current gyro value holding variable [used in auton]
int currVal = 0;

void resetDrive(){
    FrontLeft.resetRotation();
    BackLeft.resetRotation();
    FrontRight.resetRotation();
    BackRight.resetRotation();
    }

void resetOthers(){
    Puncher.resetRotation();
    angleAdjust.resetRotation();
    Lift.resetRotation();
    Intake.resetRotation();
}
/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */ 
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton( void ) {

    //reset drive encoders
    resetOthers();
    //reset all other encoders
    resetDrive();
    //calibrate gyro
    Gyro.startCalibration();
        //wait until done calibrating
    while(Gyro.isCalibrating()){
        Brain.Screen.printAt(1, 40, "Calibrating Gyro . . .");
        vex::task::sleep(100);
    }
    
    //just to make sure gyro is calibrated
    vex::task::sleep(1000);
    Brain.Screen.clearScreen();
    Brain.Screen.printAt(1, 40, "Gyro Calibrated!");
 
}
    void driveCoast(){
      FrontLeft.stop(vex::brakeType::coast);
      BackLeft.stop(vex::brakeType::coast);
      BackRight.stop(vex::brakeType::coast);
      FrontRight.stop(vex::brakeType::coast);

    }
    void driveHold(){
      FrontLeft.stop(vex::brakeType::hold);
      BackLeft.stop(vex::brakeType::hold);
      BackRight.stop(vex::brakeType::hold);
      FrontRight.stop(vex::brakeType::hold);
    }

    void ratchetLoad(){
        if(!pLoaded){
        if(Controller1.ButtonR1.pressing()){
                //wait until released
                   while(Controller1.ButtonR1.pressing()){
                       vex::task::sleep(100);
                   }
                //run func
                pLastVal += 180;
                Puncher.rotateTo(pLastVal, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
                //Puncher.stop(vex::brakeType::coast);
                pLoaded = true;
                }
            }

    }
    void ratchetFire(){
        if(pLoaded){
        if(Controller1.ButtonR2.pressing()){
                //wait until released
                   while(Controller1.ButtonR2.pressing()){
                       vex::task::sleep(100);
                   }
                //run func
                   pLastVal += 180;
                Puncher.rotateTo(pLastVal, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
                //Puncher.rotateTo(180, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);

                //Puncher.stop(vex::brakeType::coast);
                pLoaded = false;
                }
            }

    }

    void ratchetBoth(){
        if(Controller1.ButtonR1.pressing()){
                //wait until released
                   while(Controller1.ButtonR1.pressing()){
                       vex::task::sleep(100);
                   }
                //run func
                   if(pLoaded){
                   pLastVal += 180;
                Puncher.rotateTo(pLastVal, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
                //Puncher.stop(vex::brakeType::coast);
                pLoaded = false;
                }
                else if(!pLoaded){
                    pLastVal += 180;
                Puncher.rotateTo(pLastVal, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
                //Puncher.stop(vex::brakeType::coast);
                pLoaded = true;
                }
           }
    }

    void ratchetFull(){
        if(Controller1.ButtonR2.pressing()){
                //wait until released
                   while(Controller1.ButtonR2.pressing()){
                       vex::task::sleep(100);
                   }
                //run func
                pLastVal += 360;
                Puncher.rotateTo(pLastVal, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
           }
    }



void ratchetTaskFunc(){
    if(!autoRunning){
    Puncher.stop(vex::brakeType::coast);
    }

    ratchetBoth();
    ratchetFull();
    //ratchetLoad();
    //ratchetFire();
}

    
//other task used to run puncher and cap intake triggers
    
int ratchetTask(){
     while(true){
            ratchetTaskFunc();
            //to not waste resources
            vex::task::sleep(20);
        }
        return 0;
}

    //gyro turn func
    //bool rightTurn - is it a right turn or not
    //vLeft - velocity of left side of drive
    //vRight - velocity of right side of drive
    //amt - amount to turn
    void gyroTurn(bool rightTurn, int vLeft, int vRight, int amt){
        
        //steal the gyro's current value
        currVal = Gyro.value(vex::analogUnits::range8bit);
        
        //if it's a right turn, execute right turn procedure
        if(rightTurn){
          FrontLeft.spin(vex::directionType::fwd, vLeft, vex::velocityUnits::pct);
          BackLeft.spin(vex::directionType::fwd, vLeft, vex::velocityUnits::pct);
          BackRight.spin(vex::directionType::rev, vRight, vex::velocityUnits::pct);
          FrontRight.spin(vex::directionType::rev, vRight, vex::velocityUnits::pct);
          //wait until difference between real time value and stored value passes threshold
          while(((Gyro.value(vex::analogUnits::range8bit)) - currVal) < amt){
            vex::task::sleep(10); 
          }
          driveHold();
          vex::task::sleep(250);
          driveCoast();
        }
        //if it's a left turn, execute left turn
        else if(!rightTurn){
          FrontLeft.spin(vex::directionType::rev, vLeft, vex::velocityUnits::pct);
          BackLeft.spin(vex::directionType::rev, vLeft, vex::velocityUnits::pct);
          BackRight.spin(vex::directionType::fwd, vRight, vex::velocityUnits::pct);
          FrontRight.spin(vex::directionType::fwd, vRight, vex::velocityUnits::pct);
          while(((Gyro.value(vex::analogUnits::range8bit)) - currVal) > (-1 * amt)){
            vex::task::sleep(10); 
          }
          driveHold();
          vex::task::sleep(250);
          driveCoast();
        }
      }
    
    //function to toggle lock and coast with boolean
    void driveLock(bool z){
        // if z is true, lock is turned on
        // else, it's turned off
        if(z){
            driveHold(); 
        }
        else if(!z) {
            driveCoast();
        }
    }

    //d in inches
    //s speed - in pct out of %100
    void driveMoveFor(float d, int s){
        resetDrive();
        driveLock(false);
        //calculate distance from inches to revolutions
        float revo = d / (4 * math_Pi);
        FrontLeft.rotateFor(revo, vex::rotationUnits::rev, s, vex::velocityUnits::pct, false);
        FrontRight.rotateFor(revo, vex::rotationUnits::rev, s, vex::velocityUnits::pct, false);
        BackLeft.rotateFor(revo, vex::rotationUnits::rev, s, vex::velocityUnits::pct, false);
        BackRight.rotateFor(revo, vex::rotationUnits::rev, s, vex::velocityUnits::pct, true);
        //driveLock(true);
    }
    
  //turning without gyro
    //left dist in inches - negative for backwards
    //right dist in inches
    //left speed in pct
    //right speed in pct
    void driveTurnFor(float leftdist, float rightddist, int leftSpeed, int rightSpeed){
        resetDrive();
        driveLock(true);
        float Lrevo = leftdist / (4 * math_Pi);
        float Rrevo = rightddist / (4 * math_Pi);
        FrontLeft.rotateFor(Lrevo, vex::rotationUnits::rev, leftSpeed, vex::velocityUnits::pct, false);
        BackLeft.rotateFor(Lrevo, vex::rotationUnits::rev, leftSpeed, vex::velocityUnits::pct, false);
        FrontRight.rotateFor(Rrevo, vex::rotationUnits::rev, rightSpeed, vex::velocityUnits::pct, false);
        BackRight.rotateFor(Rrevo, vex::rotationUnits::rev, rightSpeed, vex::velocityUnits::pct, true);
        driveLock(true);
    }
/*
    double avgDrive(){
        return (FrontLeft.rotation(vex::rotationUnits::rev) + (BackLeft.rotation(vex::rotationUnits::rev)) + FrontRight.rotation(vex::rotationUnits::rev) + BackRight.rotation(vex::rotationUnits::rev));
    }
*/
    //timeout drive for time
    void driveTimeout(float leftTime, float rightTime){
        FrontLeft.setTimeout(leftTime, vex::timeUnits::sec);
        BackLeft.setTimeout(leftTime, vex::timeUnits::sec);
        FrontRight.setTimeout(rightTime, vex::timeUnits::sec);
        BackRight.setTimeout(rightTime, vex::timeUnits::sec);
    }

        /*-------------------------------------------------------------------------------------------*/
        /*                                                                                           */
        /*                                                                                           */
        /*  Red Auton .                                                                              */
        /*                                                                                           */
        /*                                                                                           */
        /*-------------------------------------------------------------------------------------------*/

    //if all false, run 3 flag with cap flip
    //if four flag, run 3 flag with cap flip and middle pole low flag
    //if five flag, run 3 flag with cap flip, high flag shot, and middle pole low flag
    //if park, run 3 flag with cap flip and park
    void threeFlagRed(bool fourFlag, bool fiveFlag, bool park){
         Puncher.resetRotation();
        //reset driveTrain encoders
        resetDrive();
        resetOthers();
        //start intake
        Intake.spin(vex::directionType::fwd, (maxSpeed * .4), vex::velocityUnits::pct);

        //run drive forward for 34 inches
        driveMoveFor(36, 60);
        //wait to intake ball
        vex ::task::sleep(150); 

        //slow intake down so ball doesn't get yeet
        Intake.spin(vex::directionType::fwd, (maxSpeed * .5), vex::velocityUnits::pct);
                
        resetDrive();
        //lift up so it doesn't hit field wall
        Lift.rotateTo(340, vex::rotationUnits::deg, 85, vex::velocityUnits::pct, false);
        Lift.setTimeout(1000, vex::timeUnits::msec);

        //hit field wall and realign with swing turn
        //driveTurnFor(-46, -46.5, 80, 75);
        driveTurnFor(-46, -46.5, 80, 78);
        driveTimeout(2, 2);

        //hold lift up
        Lift.stop(vex::brakeType::hold);

        //settle down
        vex::task::sleep(150);

        resetDrive();

        //stop intake
        Intake.spin(vex::directionType::fwd, (maxSpeed * 0), vex::velocityUnits::pct);

        //preLoad puncher with ratchet
        Puncher.rotateTo(180, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, false);
        Puncher.setTimeout(600, vex::timeUnits::msec);

        //drive forward for flag alignment before turning
        driveMoveFor(8.75, 45);

        //put ball down
        Intake.rotateFor(-2, vex::rotationUnits::rev, (maxSpeed), vex::velocityUnits::pct, false);
        Intake.setTimeout(1000, vex::timeUnits::msec);

        //put lift down
        Lift.rotateTo(0, vex::rotationUnits::deg, 85, vex::velocityUnits::pct, false);
        Lift.setTimeout(1000, vex::timeUnits::msec);
        driveTimeout(1, 1);
        
        //using gyro turn left to align with flags

        //start drive motors
        FrontLeft.spin(vex::directionType::rev, 60, vex::velocityUnits::pct);
        BackLeft.spin(vex::directionType::rev, 60, vex::velocityUnits::pct);
        BackRight.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);
        FrontRight.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) > -890){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(150);
        driveCoast();

        Lift.stop(vex::brakeType::coast);

        ////drive forward to align front and back for top flag - puncher has already started
        //drive forward to align front and back for top flag - puncher has already preloaded
        driveMoveFor(8, 50);
        driveTimeout(1, 1);

        //pull back slipgear just enough to shoot
        Puncher.rotateTo(360, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
        Puncher.setTimeout(1000, vex::timeUnits::msec);
        Puncher.stop(vex::brakeType::coast);

        //get next ball up
        Intake.rotateFor(5, vex::rotationUnits::rev, (maxSpeed * .80), vex::velocityUnits::pct, false);
        vex::task::sleep(100);
        //change angle
        angleAdjust.rotateTo(120, vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);
        //give ball a little bit of time
        vex::task::sleep(100);

        //shoot second ball
        Puncher.rotateTo(720, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
        Puncher.setTimeout(1000, vex::timeUnits::msec);
        Puncher.stop(vex::brakeType::coast);

       // vex::task::sleep(2000);

        angleAdjust.rotateTo(0,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);
        //vex::task::sleep(100);
        Intake.spin(vex::directionType::fwd, (maxSpeed), vex::velocityUnits::pct);


        //run intake to get next ball

        //drive forward to next position for medium flag
        //driveMoveFor(21, 65); 
        
        driveCoast();
        resetDrive();

        //gyroTurn(false, 40, 40, 2);
        FrontLeft.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        BackLeft.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        BackRight.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        FrontRight.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) > -90){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(400);
        driveCoast();
        
        resetDrive();
        vex::task::sleep(100);
        
        driveMoveFor(15.5, 80);
        resetDrive();

        //gyroTurn(false, 40, 40, 2);
        FrontLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        BackLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        BackRight.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        FrontRight.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) < 80){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(400);
        driveCoast();

        resetDrive();
        //driveMoveFor(23, 70);
        driveTurnFor(21, 23, 63, 70);

        
        //driveTurnFor(120, 118, 70, 69);
        vex::task::sleep(50);
        //gyroTurn(true, 30, 30, 4);
        //gyroTurn(true, 40, 40, 2);
        //driveMoveFor(22, 75);

        //vex::task::sleep(2000);
         ///trevo = (75 / (4 * math_Pi));
        
      //  BackRight.rotateFor(trevo, vex::rotationUnits::rev, 45, vex::velocityUnits::pct, false);
      //  BackLeft.rotateFor(trevo, vex::rotationUnits::rev, 45, vex::velocityUnits::pct, true);
        //vex::task::sleep(5000);
        //driveTurnFor(-48, -46.5, 88, 95);
        
        
     //   Puncher.stop(vex::brakeType::coast);

        //drive back before turning to flip cap
        driveMoveFor(-17, 65);
        //reset lift to orig position [just in case]
       // CapIntake.rotateTo(0,vex::rotationUnits::deg, 80,vex::velocityUnits::pct, false);
       // Lift.rotateTo(0, vex::rotationUnits::deg, 85,vex::velocityUnits::pct);
            
        
        //Puncher.rotateFor(150, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, false);
        //turn to face towards low cap
        gyroTurn(true, 50, 50, 60);

        //start intake running backwards to flip cap
        Intake.spin(vex::directionType::rev, (maxSpeed * 1), vex::velocityUnits::pct);
        //void threeFlagRed(bool fourFlag, bool fiveFlag, bool park){

        if(park){
          //drive and flip cap
            driveMoveFor(33, 100);
            driveTimeout(1.5, 1.5);

        }
        else if(fourFlag){
          //drive forward to flip cap and drive enough for next shot
            Puncher.rotateTo(900, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, false);
            Puncher.setTimeout(600, vex::timeUnits::msec);
            driveMoveFor(33, 100);
            driveTimeout(1.5, 1.5);
            //vex::task::sleep(100);
            resetDrive();

            angleAdjust.rotateTo(120,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
            angleAdjust.setTimeout(600, vex::timeUnits::msec);

           FrontLeft.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
            BackLeft.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
            BackRight.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
            FrontRight.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
            currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) > -600){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(250);
        driveCoast();



        Puncher.rotateTo(1080, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
        angleAdjust.rotateTo(0,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);
        driveCoast();

        }
        else if(fiveFlag){

            Puncher.rotateTo(900, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, false);
            Puncher.setTimeout(600, vex::timeUnits::msec);
          driveMoveFor(33, 100);
          driveTimeout(1.5, 1.5);
          //vex::task::sleep(100);
          resetDrive();

            angleAdjust.rotateTo(120,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
            angleAdjust.setTimeout(600, vex::timeUnits::msec);

           FrontLeft.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
            BackLeft.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
            BackRight.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
            FrontRight.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
            currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) > -600){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(100);
        driveCoast();



        Puncher.rotateTo(1080, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
        angleAdjust.rotateTo(0,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);
        vex::task::sleep(150);

        driveTurnFor(25, 30, 75, 100);

        driveCoast();

           // Lift.setTimeout(600, vex::timeUnits::msec);
            
            //vex::task::sleep(2000);
            //driveMoveFor(-100, 100);
            // Lift.rotateTo(0, vex::rotationUnits::deg, 85, vex::velocityUnits::pct, true);

        }
        //none
        else {
          driveMoveFor(33, 100);
         driveTimeout(1.5, 1.5);
        }

        //end of auton stuff
        Puncher.stop(vex::brakeType::coast);
        Intake.stop(vex::brakeType::coast);
        driveLock(false);
       
    }

        /*-------------------------------------------------------------------------------------------*/
        /*                                                                                           */
        /*                                                                                           */
        /*  Blue Auton                                                                               */
        /*                                                                                           */
        /*                                                                                           */
        /*-------------------------------------------------------------------------------------------*/

    //same as threeFlagRed, but blue
    //if all false, run 3 flag with cap flip
    //if four flag, run 3 flag with cap flip and middle pole low flag
    //if five flag, run 3 flag with cap flip, high flag shot, and middle pole low flag
    //if park, run 3 flag with cap flip and park
    void threeFlagBlue(bool fourFlag, bool fiveFlag, bool park){
           Puncher.resetRotation();
       // int now = Gyro.value(vex::analogUnits::range8bit);
        //reset driveTrain encoders
        resetDrive();
        resetOthers();
        //start intake
        Intake.spin(vex::directionType::fwd, (maxSpeed * .4), vex::velocityUnits::pct);
        /*
        FrontLeft.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);
        BackLeft.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);
        BackRight.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);
        FrontRight.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);
        */
        //run drive forward for 34 inches
        driveMoveFor(36, 60);

        //make sure puncher is coasting
        //Puncher.stop(vex::brakeType::coast);

         //float trevo = (36.5 / (4 * math_Pi));
        // BackLeft.rotateFor(trevo, vex::rotationUnits::rev, 60, vex::velocityUnits::pct, false);
        // BackRight.rotateFor(trevo, vex::rotationUnits::rev, 60, vex::velocityUnits::pct, true);
        //driveMoveFor(16.5, 70);
       // driveTurnFor(36.5, 36.5, 63, 60);
        //driveTimeout(2, 2);
        
        //delay and wait for .350 of a second
        //pick up ball        
        //gyroTurn(true, 50, 50, abs(now - Gyro.value(vex::analogUnits::range8bit)));
        //stop intake
        vex ::task::sleep(150); 
        //Intake.spin(vex::directionType::fwd, (0), vex::velocityUnits::pct);
        Intake.spin(vex::directionType::fwd, (maxSpeed * .5), vex::velocityUnits::pct);

        //vex::task::sleep(200);
        
        //drive back 46 inches
        //hit field wall and realign
        
        resetDrive();
       // driveMoveFor(-44, 100);
        Lift.rotateTo(340, vex::rotationUnits::deg, 85, vex::velocityUnits::pct, false);
        Lift.setTimeout(1000, vex::timeUnits::msec);
        driveTurnFor(-45, -45.5, 80, 78);
        Lift.stop(vex::brakeType::hold);
        driveTimeout(3, 3);

        vex::task::sleep(150);
      

         //trevo = (-48 / (4 * math_Pi));
         //BackLeft.rotateFor(trevo, vex::rotationUnits::rev, 60, vex::velocityUnits::pct, false);
         //BackRight.rotateFor(trevo, vex::rotationUnits::rev, 60, vex::velocityUnits::pct, true);
        //driveTurnFor(-48, -46.5, 88, 95);
        //reset drive after realigning
        resetDrive();

        //vex::task::sleep(200);

        

        //drive forward 10 inches for flag alignment before turning
        Intake.spin(vex::directionType::fwd, (maxSpeed * 0), vex::velocityUnits::pct);

        Puncher.rotateTo(180, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, false);
        Puncher.setTimeout(600, vex::timeUnits::msec);
        driveMoveFor(8.75, 45);
        Intake.rotateFor(-2, vex::rotationUnits::rev, (maxSpeed), vex::velocityUnits::pct, false);
        Intake.setTimeout(1000, vex::timeUnits::msec);

        Lift.rotateTo(0, vex::rotationUnits::deg, 85, vex::velocityUnits::pct, false);
        Lift.setTimeout(1000, vex::timeUnits::msec);
        driveTimeout(1, 1);
        


        //using gyro turn left to align with flags

        //start drive motors
        FrontLeft.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);
        BackLeft.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);
        BackRight.spin(vex::directionType::rev, 60, vex::velocityUnits::pct);
        FrontRight.spin(vex::directionType::rev, 60, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) < 860){
           vex::task::sleep(5); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(150);
        driveCoast();

        ////drive forward to align front and back for top flag - puncher has already started
        //drive forward to align front and back for top flag - puncher has already preloaded
        Lift.stop(vex::brakeType::coast);

        driveMoveFor(8, 50);
        driveTimeout(2, 2);

        //pull back slipgear just enough to shoot
        Puncher.rotateTo(360, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
        Puncher.setTimeout(1000, vex::timeUnits::msec);
        Puncher.stop(vex::brakeType::coast);
        //get next ball up
        Intake.rotateFor(5, vex::rotationUnits::rev, (maxSpeed * .80), vex::velocityUnits::pct, false);
        vex::task::sleep(100);
        angleAdjust.rotateTo(120, vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);
        
        vex::task::sleep(100);

        Puncher.rotateTo(720, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
        Puncher.setTimeout(1000, vex::timeUnits::msec);
        Puncher.stop(vex::brakeType::coast);

       // vex::task::sleep(2000);

        angleAdjust.rotateTo(0,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);
        //vex::task::sleep(100);
        Intake.spin(vex::directionType::fwd, (maxSpeed), vex::velocityUnits::pct);


        //run intake to get next ball

        //drive forward to next position for medium flag
        //driveMoveFor(21, 65); 
        
        driveCoast();
        resetDrive();

        //gyroTurn(false, 40, 40, 2);
        FrontLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        BackLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        BackRight.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        FrontRight.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) < 90){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(400);
        driveCoast();
        
        resetDrive();
        vex::task::sleep(100);
        
        driveMoveFor(15.5, 80);
        resetDrive();

        //gyroTurn(false, 40, 40, 2);
        FrontLeft.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        BackLeft.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        BackRight.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        FrontRight.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) > -80){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(400);
        driveCoast();

        resetDrive();
        //driveMoveFor(23, 70);
        driveTurnFor(23, 21, 70, 65);

        
        //driveTurnFor(120, 118, 70, 69);
        vex::task::sleep(50);
        //gyroTurn(true, 30, 30, 4);
        //gyroTurn(true, 40, 40, 2);
        //driveMoveFor(22, 75);

        //vex::task::sleep(2000);
         ///trevo = (75 / (4 * math_Pi));
        
      //  BackRight.rotateFor(trevo, vex::rotationUnits::rev, 45, vex::velocityUnits::pct, false);
      //  BackLeft.rotateFor(trevo, vex::rotationUnits::rev, 45, vex::velocityUnits::pct, true);
        //vex::task::sleep(5000);
        //driveTurnFor(-48, -46.5, 88, 95);
        
        
     //   Puncher.stop(vex::brakeType::coast);

        //drive back before turning to flip cap
        driveMoveFor(-17, 65);
        //reset lift to orig position [just in case]
       // CapIntake.rotateTo(0,vex::rotationUnits::deg, 80,vex::velocityUnits::pct, false);
       // Lift.rotateTo(0, vex::rotationUnits::deg, 85,vex::velocityUnits::pct);
            
        
        //Puncher.rotateFor(150, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, false);
        //turn to face towards low cap
        gyroTurn(false, 50, 50, 70);

        //start intake running backwards to flip cap
        Intake.spin(vex::directionType::rev, (maxSpeed * 1), vex::velocityUnits::pct);
        //void threeFlagRed(bool fourFlag, bool fiveFlag, bool park){

        if(park){
          //drive and flip cap
            driveMoveFor(30, 100);
            driveTimeout(1.5, 1.5);

        }
        else if(fourFlag){
          //drive forward to flip cap and drive enough for next shot
            Puncher.rotateTo(900, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, false);
            Puncher.setTimeout(600, vex::timeUnits::msec);
            driveMoveFor(25, 100);
            driveTimeout(1.5, 1.5);
            //vex::task::sleep(100);
            resetDrive();

            angleAdjust.rotateTo(120,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
            angleAdjust.setTimeout(600, vex::timeUnits::msec);

           FrontLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
            BackLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
            BackRight.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
            FrontRight.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
            currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) < 700){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(250);
        driveCoast();



        Puncher.rotateTo(1080, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
        angleAdjust.rotateTo(0,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);

        driveCoast();

        }
        else if(fiveFlag){

            Puncher.rotateTo(900, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, false);
            Puncher.setTimeout(600, vex::timeUnits::msec);
          driveMoveFor(25, 100);
          driveTimeout(1.5, 1.5);
          //vex::task::sleep(100);
          resetDrive();

            angleAdjust.rotateTo(120,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
            angleAdjust.setTimeout(600, vex::timeUnits::msec);

           FrontLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
            BackLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
            BackRight.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
            FrontRight.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
            currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) < 700){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(100);
        driveCoast();



        Puncher.rotateTo(1080, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
        angleAdjust.rotateTo(0,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);
        vex::task::sleep(150);

        driveTurnFor(30, 25, 100, 75);

        driveCoast();

           // Lift.setTimeout(600, vex::timeUnits::msec);
            
            //vex::task::sleep(2000);
            //driveMoveFor(-100, 100);
            // Lift.rotateTo(0, vex::rotationUnits::deg, 85, vex::velocityUnits::pct, true);

        }
        //none
        else {
          driveMoveFor(30, 100);
          driveTimeout(1.5, 1.5);
        }

        //end of auton stuff
        Puncher.stop(vex::brakeType::coast);
        Intake.stop(vex::brakeType::coast);
        driveLock(false);
    }

    void redParking(){
        resetDrive();
        resetOthers();

        //drive forward
        driveMoveFor(36, 50);
        vex ::task::sleep(300);


        resetDrive();

        //turn and face platform
        FrontLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        BackLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        BackRight.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        FrontRight.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) < 860){
           vex::task::sleep(5); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(300);
        driveCoast();
        vex::task::sleep(300);
        resetDrive();
        //drive up platform
        driveMoveFor(55, 100);
        vex::task::sleep(300);
        resetDrive();

    }

    void blueParking(){
       resetDrive();
        resetOthers();
        //drive forward
        driveMoveFor(36, 50);
        vex ::task::sleep(300);


        resetDrive();

        //turn and face platform
        FrontLeft.spin(vex::directionType::rev, 60, vex::velocityUnits::pct);
        BackLeft.spin(vex::directionType::rev, 60, vex::velocityUnits::pct);
        BackRight.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);
        FrontRight.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) > -920){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(250);
        driveCoast();
        vex::task::sleep(300);
        //drive up platform
        driveMoveFor(55, 100);
        resetDrive();
    }

    void backRedMiddle(){
        resetDrive();
        resetOthers();
        //start intake
        Intake.spin(vex::directionType::fwd, (maxSpeed * 1), vex::velocityUnits::pct);

        //run drive forward for 36 inches
        driveMoveFor(36, 55);
        //wait to intake ball
        vex ::task::sleep(300); 

        //slow intake down so ball doesn't get yeet
        Intake.spin(vex::directionType::fwd, (maxSpeed * 1), vex::velocityUnits::pct);  

        resetDrive();

        //drive back a little
        driveMoveFor(-1.5, 40);

        //now that we have the ball, put it down a little before we shoot
        Intake.rotateFor(-1.5, vex::rotationUnits::rev, (maxSpeed), vex::velocityUnits::pct, false);
        Intake.setTimeout(1000, vex::timeUnits::msec);

        vex ::task::sleep(300); 
        //turn left to face alliance platform
        FrontLeft.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        BackLeft.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        BackRight.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        FrontRight.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) > -920){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(150);
        driveCoast();

        vex::task::sleep(300); 

        //prepull back puncher for shooting later on
        Puncher.rotateTo(180, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, false);
        Puncher.setTimeout(600, vex::timeUnits::msec);

        //angle adjust ahead of time for first shot
        angleAdjust.rotateTo(52, vex::rotationUnits::deg, 100,vex::velocityUnits::pct, false);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);

        //drive forward to align against low platform
        driveMoveFor(5, 40);

        vex::task::sleep(300); 

        //move right side backwards to slowly align with flags
        BackRight.spin(vex::directionType::rev, 25, vex::velocityUnits::pct);
        FrontRight.spin(vex::directionType::rev, 25, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) < 75){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(300);
        driveCoast();

        //aligned, so shoot both flags

        //first shot would be too high, but we're already angle adjusted
        Puncher.rotateTo(360, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
        Puncher.setTimeout(1000, vex::timeUnits::msec);
        Puncher.stop(vex::brakeType::coast);

        //next ball up
        Intake.rotateFor(5, vex::rotationUnits::rev, (maxSpeed * .80), vex::velocityUnits::pct, false);
        vex::task::sleep(100);

        //angle adjust to medium height
        angleAdjust.rotateTo(135, vex::rotationUnits::deg,100,vex::velocityUnits::pct, true);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);
        
        vex::task::sleep(100);

        //shoot next shot
        Puncher.rotateTo(720, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
        Puncher.setTimeout(1000, vex::timeUnits::msec);
        Puncher.stop(vex::brakeType::coast);
        vex::task::sleep(100);

        //reset angle-adjuster for start of match
        angleAdjust.rotateTo(0,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);

        //stop intake (just in case)
        Intake.stop(vex::brakeType::coast);
        resetDrive();

        BackRight.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        FrontRight.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) > -75){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(150);
        driveCoast();

        //drive back a little before charging up platform
        driveMoveFor(-10, 50);
        vex::task::sleep(300);

        //drive up platform
        driveMoveFor(50, 100);

    }
    void backBlueMiddle(){
        resetDrive();
        resetOthers();
        //start intake
        Intake.spin(vex::directionType::fwd, (maxSpeed * .7), vex::velocityUnits::pct);

        //run drive forward for 36 inches
        driveMoveFor(36, 55);
        //wait to intake ball
        vex ::task::sleep(300); 

        //slow intake down so ball doesn't get yeet
        Intake.spin(vex::directionType::fwd, (maxSpeed * .7), vex::velocityUnits::pct);  

        resetDrive();

        //drive back a little
        driveMoveFor(-6, 40);

        //now that we have the ball, put it down a little before we shoot
        Intake.rotateFor(-2, vex::rotationUnits::rev, (maxSpeed), vex::velocityUnits::pct, false);
        Intake.setTimeout(1000, vex::timeUnits::msec);

        vex ::task::sleep(300); 
        //turn left to face alliance platform
        FrontLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        BackLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        BackRight.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        FrontRight.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) < 870){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(150);
        driveCoast();

        vex::task::sleep(300); 

        //prepull back puncher for shooting later on
        Puncher.rotateTo(180, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, false);
        Puncher.setTimeout(600, vex::timeUnits::msec);

        //angle adjust ahead of time for first shot
        angleAdjust.rotateTo(52, vex::rotationUnits::deg, 100,vex::velocityUnits::pct, false);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);

        //drive forward to align against low platform
        driveMoveFor(5.2, 40);

        vex::task::sleep(300); 

        //move right side backwards to slowly align with flags
        BackLeft.spin(vex::directionType::rev, 25, vex::velocityUnits::pct);
        FrontLeft.spin(vex::directionType::rev, 25, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) > -75){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(300);
        driveCoast();

        //aligned, so shoot both flags

        //first shot would be too high, but we're already angle adjusted
        Puncher.rotateTo(360, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
        Puncher.setTimeout(1000, vex::timeUnits::msec);
        Puncher.stop(vex::brakeType::coast);

        //next ball up
        Intake.rotateFor(5, vex::rotationUnits::rev, (maxSpeed * .80), vex::velocityUnits::pct, false);
        vex::task::sleep(100);

        //angle adjust to medium height
        angleAdjust.rotateTo(135, vex::rotationUnits::deg,100,vex::velocityUnits::pct, true);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);
        
        vex::task::sleep(100);

        //shoot next shot
        Puncher.rotateTo(720, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
        Puncher.setTimeout(1000, vex::timeUnits::msec);
        Puncher.stop(vex::brakeType::coast);
        vex::task::sleep(100);

        //reset angle-adjuster for start of match
        angleAdjust.rotateTo(0,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);

        //stop intake (just in case)
        Intake.stop(vex::brakeType::coast);
        resetDrive();

        BackLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        FrontLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) < 75){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(150);
        driveCoast();

        //drive back a little before charging up platform
        driveMoveFor(-10, 50);
        vex::task::sleep(300);

        //drive up platform
        driveMoveFor(51, 100);
        driveLock(true);
        vex::task::sleep(1500);
        driveLock(false);

    }

    //same as middle auto, but shoots cross court to descore other side
    void backRedFar(){
        resetDrive();
        resetOthers();
        //start intake
        Intake.spin(vex::directionType::fwd, (maxSpeed * 1), vex::velocityUnits::pct);

        //run drive forward for 36 inches
        driveMoveFor(36, 55);
        //wait to intake ball
        vex ::task::sleep(300); 

        //slow intake down so ball doesn't get yeet
        Intake.spin(vex::directionType::fwd, (maxSpeed * 1), vex::velocityUnits::pct);  

        resetDrive();

        //drive back a little
        driveMoveFor(-1.5, 40);

        Intake.spin(vex::directionType::fwd, (maxSpeed * 0), vex::velocityUnits::pct);  
        //now that we have the ball, put it down a little before we shoot
        vex ::task::sleep(600); 
        Intake.rotateFor(-2, vex::rotationUnits::rev, (maxSpeed), vex::velocityUnits::pct, false);
        Intake.setTimeout(1000, vex::timeUnits::msec);

        vex ::task::sleep(300); 
        //turn left to face alliance platform
        FrontLeft.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        BackLeft.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        BackRight.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        FrontRight.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) > -920){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(150);
        driveCoast();

        vex::task::sleep(300); 

        //prepull back puncher for shooting later on
        //Puncher.rotateTo(180, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, false);
        //Puncher.setTimeout(600, vex::timeUnits::msec);

        //angle adjust ahead of time for first shot
        angleAdjust.rotateTo(10, vex::rotationUnits::deg, 100,vex::velocityUnits::pct, false);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);

        //drive forward to align against low platform
        driveMoveFor(5, 40);

        vex::task::sleep(300); 

        //move right side backwards to slowly align with flags
        BackRight.spin(vex::directionType::rev, 25, vex::velocityUnits::pct);
        FrontRight.spin(vex::directionType::rev, 25, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        //testing 400 value
        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) < 330){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(300);
        driveCoast();

        //delay and wait 4 seconds as to shoot flags as late as possible (without delay, 10.5 second auto)
        //adjust to make auto 14.5 seconds
        vex::task::sleep(2600); 

        //aligned, so shoot both flags
        //first shot would be too high, but we're already angle adjusted
        Puncher.rotateTo(360, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
        Puncher.setTimeout(1000, vex::timeUnits::msec);
        Puncher.stop(vex::brakeType::coast);

        //next ball up
        Intake.rotateFor(5, vex::rotationUnits::rev, (maxSpeed * .80), vex::velocityUnits::pct, false);
        vex::task::sleep(100);

        //angle adjust to medium height
        angleAdjust.rotateTo(100, vex::rotationUnits::deg,100,vex::velocityUnits::pct, true);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);
        
        vex::task::sleep(100);

        //shoot next shot
        Puncher.rotateTo(720, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
        Puncher.setTimeout(1000, vex::timeUnits::msec);
        Puncher.stop(vex::brakeType::coast);
        vex::task::sleep(100);

        //reset angle-adjuster for start of match
        angleAdjust.rotateTo(0,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);

        //stop intake (just in case)
        Intake.stop(vex::brakeType::coast);
        resetDrive();

        BackRight.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        FrontRight.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        //tesing 400 value
        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) > -330){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(150);
        driveCoast();

        //drive back a little before charging up platform
        driveMoveFor(-10, 50);
        vex::task::sleep(300);

        //drive up platform
        driveMoveFor(50, 100);
    }

    void backBlueFar(){
        resetDrive();
        resetOthers();
        //start intake
        Intake.spin(vex::directionType::fwd, (maxSpeed * 1), vex::velocityUnits::pct);

        //run drive forward for 36 inches
        driveMoveFor(36, 55);
        //wait to intake ball
        vex ::task::sleep(300); 

        //slow intake down so ball doesn't get yeet
        Intake.spin(vex::directionType::fwd, (maxSpeed * 1), vex::velocityUnits::pct);  

        resetDrive();

        //drive back a little
        driveMoveFor(-6, 40);

        Intake.spin(vex::directionType::fwd, (maxSpeed * 0), vex::velocityUnits::pct);  
        //now that we have the ball, put it down a little before we shoot
        vex ::task::sleep(600); 
        Intake.rotateFor(-2, vex::rotationUnits::rev, (maxSpeed), vex::velocityUnits::pct, false);
        Intake.setTimeout(1000, vex::timeUnits::msec);

        vex ::task::sleep(300); 
        //turn left to face alliance platform
        FrontLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        BackLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        BackRight.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        FrontRight.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) < 870){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(150);
        driveCoast();

        vex::task::sleep(300); 

        //prepull back puncher for shooting later on
        //Puncher.rotateTo(180, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, false);
        //Puncher.setTimeout(600, vex::timeUnits::msec);

        //angle adjust ahead of time for first shot
        angleAdjust.rotateTo(60, vex::rotationUnits::deg, 100,vex::velocityUnits::pct, false);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);

        //drive forward to align against low platform
        driveMoveFor(5.7, 40);

        vex::task::sleep(300); 

        //move right side backwards to slowly align with flags
        BackLeft.spin(vex::directionType::rev, 25, vex::velocityUnits::pct);
        FrontLeft.spin(vex::directionType::rev, 25, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        //testing 400 value
        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) > -315){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(300);
        driveCoast();

        //delay and wait 4 seconds as to shoot flags as late as possible (without delay, 10.5 second auto)
        //adjust to make auto 14.5 seconds
        vex::task::sleep(2600); 

        //aligned, so shoot both flags
        //first shot would be too high, but we're already angle adjusted
        Puncher.rotateTo(360, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
        Puncher.setTimeout(1000, vex::timeUnits::msec);
        Puncher.stop(vex::brakeType::coast);

        //next ball up
        Intake.rotateFor(5, vex::rotationUnits::rev, (maxSpeed * .80), vex::velocityUnits::pct, false);
        vex::task::sleep(100);

        //angle adjust to medium height
        angleAdjust.rotateTo(130, vex::rotationUnits::deg,100,vex::velocityUnits::pct, true);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);
        
        vex::task::sleep(100);

        //shoot next shot
        Puncher.rotateTo(720, vex::rotationUnits::deg, 100, vex::velocityUnits::pct, true);
        Puncher.setTimeout(1000, vex::timeUnits::msec);
        Puncher.stop(vex::brakeType::coast);
        vex::task::sleep(100);

        //reset angle-adjuster for start of match
        angleAdjust.rotateTo(0,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
        angleAdjust.setTimeout(600, vex::timeUnits::msec);

        //stop intake (just in case)
        Intake.stop(vex::brakeType::coast);
        resetDrive();

        BackLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        FrontLeft.spin(vex::directionType::fwd, 40, vex::velocityUnits::pct);
        currVal = Gyro.value(vex::analogUnits::range12bit);

        //tesing 400 value
        while(((Gyro.value(vex::analogUnits::range12bit)) - currVal) < 315){
           vex::task::sleep(10); 
        }
        //stop motors with PID
        driveHold();
        driveTimeout(2, 2); 
        //stop motors and put them on coast
        vex::task::sleep(150);
        driveCoast();

        //drive back a little before charging up platform
        driveMoveFor(-7, 45);
        vex::task::sleep(300);

        //drive up platform
        driveMoveFor(41.5, 100);
    }


    

void autonomous( void ) {
    autoRunning = true;
    //vex::task stop(ratchetTask);
    //run auton helper task
    //vex::task autoHelp(autoTask);
    
    /*  all false = just 3 flag with cap flip
        if first bool true, 4 flag
        if second bool true, 5 flag
        if third bool true, parking auton
        (bool fourFlag, bool fiveFlag, bool park)
    */
    
    //3 flag function - red side
    //5 flag
      //threeFlagRed(false, true, false);
    //4 flag
      //threeFlagRed(true, false, false);
    //3 flag
      //threeFlagRed(false, false, false);

    //3 flag function - blue side
    //5 flag
      //threeFlagBlue(false, true, false);
    //4 flag
      //threeFlagBlue(true, false, false);
    //3 flag
      //threeFlagBlue(false, false, false);

    //back red park
    //redParking();

    //back blue park
    //blueParking();

        
    //back sides - red
    //backRedMiddle();
    //backRedFar();

    //back sides - blue
    //backBlueMiddle();
    backBlueFar();

    //stop auto helper task
    //vex::task stop(autoTask); 
    //just in case
    vex::task::sleep(15000);
}


    void autoAngle(){
        //if puncher trigger is clicked
        //high flags
        if(angleTrigger){
            if(anglePos == 0){
                angleAdjust.rotateTo(0,vex::rotationUnits::deg,100,vex::velocityUnits::pct);
                angleAdjust.setTimeout(600, vex::timeUnits::msec);

                //angleAdjust.stop(vex::brakeType::coast);

            }
            //medium flag
            else if(anglePos == 1){
                angleAdjust.rotateTo(120,vex::rotationUnits::deg,100,vex::velocityUnits::pct);
                angleAdjust.setTimeout(600, vex::timeUnits::msec);


            }
            //lowest flag
            else if(anglePos == 2){
                 angleAdjust.rotateTo(262,vex::rotationUnits::deg,100,vex::velocityUnits::pct);
                 angleAdjust.setTimeout(600, vex::timeUnits::msec);



            }
            angleTrigger = false;
        }
    }
    
    void angleTriggerDetect(){
            //toggle between high and medium
            if(Controller1.ButtonUp.pressing()){
            //wait until released
               while(Controller1.ButtonUp.pressing()){
                   vex::task::sleep(100);
               }
            //run func
               if(anglePos != 2){
            angleTrigger = true;
            anglePos = 1 - anglePos;
        }
            }  

            //lowest flag toggle
            else if(Controller1.ButtonRight.pressing()){
                //wait until released
               while(Controller1.ButtonRight.pressing()){
                   vex::task::sleep(100);
               }
            //run func
            angleTrigger = true;

            anglePos = 2 - anglePos;
            }


            //motor holds
            if(!angleTrigger){
            if(anglePos == 0)
                angleAdjust.stop(vex::brakeType::coast);
            
            //medium flag
            else if(anglePos == 1)
                angleAdjust.stop(vex::brakeType::hold);
            
            //lowest flag
            else if(anglePos == 2)
                 angleAdjust.stop(vex::brakeType::hold);
         }

        }
    

    

    void driveLockDetect(){
        if(Controller1.ButtonLeft.pressing()){
           //wait until released
           while(Controller1.ButtonLeft.pressing()){
               vex::task::sleep(100);
           }
           //run func
            driveLockOn = !driveLockOn;
           driveLock(driveLockOn);
       }
    }

    
    //lift down
    
    void autoLiftReset(){
        if(liftReset){
        Lift.rotateTo(0, vex::rotationUnits::deg, 85,vex::velocityUnits::pct, true);
        liftOn = false;
        //timeout
        liftReset = false;
        }
    }

    void liftResetDetect(){
                if(Controller1.ButtonA.pressing()){
                //wait until released
                   while(Controller1.ButtonA.pressing()){
                       vex::task::sleep(100);
                   }
                //run func
                liftUp = false;
                liftReset = true;
                }  
    }



    void autoLiftMedium(){
        if(liftMedium){
        Lift.rotateTo(340, vex::rotationUnits::deg, 85, vex::velocityUnits::pct, true);
        liftOn = true;
        //timeout
        liftMedium = false;
        }
    }

    void liftMediumDetect(){
        if(Controller1.ButtonY.pressing()){
                //wait until released
                   while(Controller1.ButtonY.pressing()){
                       vex::task::sleep(100);
                   }
                //run func
                liftMedium = true;
                liftUp = true;
                }  
    }


    


    void driveTaskFunc(){
        //the functions that run in this "othertask"
        
        //actions
        autoAngle();
       
        //puncher auto button
        angleTriggerDetect();
        
        //drive lock for platform
        driveLockDetect();
    }

void liftTaskFunc(){
        //the functions that run in this "othertask"
        
        //actions
        autoLiftReset();
        autoLiftMedium();
        
        //detections
        liftResetDetect();
        liftMediumDetect();
        
    }

    
int driveTask(){
        while(true){
            driveTaskFunc();
            //to not waste resources
            vex::task::sleep(20);
        }
        return 0;
    }

int liftTask(){
        while(true){
            liftTaskFunc();
            //to not waste resources
            vex::task::sleep(20);
        }
        return 0;
    }

    void controllerDisplay(){
            Controller1.Screen.clearScreen();


                    if(!driveLockOn){
                    Controller1.Screen.setCursor(3, 1);
                    //Controller1.Screen.print("               Off");
                    Controller1.Screen.print("Off");
                    }
                    else
                    {
                        Controller1.Screen.setCursor(3, 1);
                    Controller1.Screen.print("On");
                    }
        
                    Controller1.Screen.setCursor(1,1);
                    if(anglePos == 0){
                        Controller1.Screen.print("High");
                    }
                    else if(anglePos == 1){
                        Controller1.Screen.print("Medium");
                    }
                    else{
                        Controller1.Screen.print("Low");
                    }
                
                     
        }

    void brainDisplay(){
        Brain.Screen.clearScreen();
        
             // Brain.Screen.printAt(1, 120, "%d", test);
              Brain.Screen.printAt(1, 15, "%d", Gyro.value(vex::analogUnits::pct));
              Brain.Screen.printAt(1, 35, "%d", Gyro.value(vex::analogUnits::range8bit));
              Brain.Screen.printAt(1, 55, "%d", Gyro.value(vex::analogUnits::range10bit));
              Brain.Screen.printAt(1, 75, "%d", Gyro.value(vex::analogUnits::range12bit));
              Brain.Screen.printAt(1, 95, "%d", Gyro.value(vex::analogUnits::mV));
            
              //Brain.Screen.printAt(1, 115, "%d", Gyro.value(vex::rotationUnits::deg));
            
              //Brain.Screen.printAt(1, 155, "%d", Gyro.value(vex::percentUnits::pct));
              //Brain.Screen.printAt(1, 150, "%d", pLastVal);
              //Brain.Screen.printAt(1, 180, "%d", liftMedium);
         
              Brain.Screen.printAt(1, 120, "BackBlueFar");
        
        //vision sensor testing
        
          
    }



    //task only used to update brain and controller displays
    //also used to select auton's
    int displayTask(){
        while(true){
            controllerDisplay();
            brainDisplay();
            //to not waste resources - 150 cause display doesn't need to be updated super fast
            vex::task::sleep(150);
        }
        return 0;
    }

    
    void driveTrainControl(void){
        
        //lock drive if joysticks not moved
      /*  if((abs(Controller1.Axis2.value()) < 15) && (abs(Controller1.Axis3.value()) < 15)) {
            driveLock(true);     
        }
        */
        //else
        //if(driveType){

        if(liftUp){
            FrontLeft.spin(vex::directionType::fwd, Controller1.Axis3.value() * 1, vex::velocityUnits::pct);
            BackLeft.spin(vex::directionType::fwd, Controller1.Axis3.value() * 1, vex::velocityUnits::pct);
            FrontRight.spin(vex::directionType::fwd, Controller1.Axis2.value() * 1, vex::velocityUnits::pct);
            BackRight.spin(vex::directionType::fwd, Controller1.Axis2.value() * 1, vex::velocityUnits::pct);
        }
        else {

            FrontLeft.spin(vex::directionType::fwd, Controller1.Axis3.value() * 1.0, vex::velocityUnits::pct);
            BackLeft.spin(vex::directionType::fwd, Controller1.Axis3.value() * 1.0, vex::velocityUnits::pct);
            FrontRight.spin(vex::directionType::fwd, Controller1.Axis2.value() * 1.0, vex::velocityUnits::pct);
            BackRight.spin(vex::directionType::fwd, Controller1.Axis2.value() * 1.0, vex::velocityUnits::pct);
        }

    }

    //intake control for roller
    //if drivetype is true, run shooting mode
    void IntakeControl(void){

            if(Controller1.ButtonL2.pressing()){
                Intake.spin(vex::directionType::fwd, (maxSpeed * 1), vex::velocityUnits::pct);
            }
            else if(Controller1.ButtonL1.pressing()){
                Intake.spin(vex::directionType::rev, (maxSpeed * 1), vex::velocityUnits::pct);
            }
            else {
                Intake.stop(vex::brakeType::coast);
            }
        }
    
       
   // void PuncherControl(void){
    //button  

                        /*
                if(Controller1.ButtonR1.pressing()){
                    Puncher.spin(vex::directionType::rev, maxSpeed / 1.5, vex::velocityUnits::pct);
                }
                
                else if(Controller1.ButtonR2.pressing()){
                    liftOn = false;
                    puncherIsMoving = true;
                    Puncher.spin(vex::directionType::fwd, maxSpeed, vex::velocityUnits::pct);

                    //turn lift holding off if shooting
                    if(liftActivate){
                      liftActivate = false;
                    }
                    

                }
                
                else {
                    puncherIsMoving = false;
                    Puncher.stop(vex::brakeType::coast);
                    //Puncher.stop(vex::brakeType::brake);
                }
                
        }
        */

        
    
    void LiftControl(void){

        if((!liftMedium) && (!liftReset)){
        if(Controller1.ButtonX.pressing()){
                Lift.spin(vex::directionType::fwd, maxSpeed * 1, vex::velocityUnits::pct);
                liftUp = false;

                liftOn = false;
            }
        else if(Controller1.ButtonB.pressing()){
                    Lift.spin(vex::directionType::rev, (maxSpeed * .9), vex::velocityUnits::pct);
                liftUp = false;

                    liftOn = false;
            }
        else if((!liftMedium) && (!liftReset)){
            if(liftOn){
                Lift.stop(vex::brakeType::hold);     
            }
            else if (!liftOn){
                Lift.stop(vex::brakeType::coast);
            }
            
        }
    }
    }
    
    
        
        
    void allRemoteFunc(void){
        LiftControl();
        //PuncherControl();
        IntakeControl();
        driveTrainControl();      
    }

void usercontrol( void ) {
    autoRunning = false;
  // User control code here, inside the loop
    
  //initiate task for triggers, like cap control and puncher button
  //vex::task stop(autoTask); 
  vex::task driveTriggers(driveTask, 1);
  vex::task ratchetTriggers(ratchetTask, 2);
  vex::task liftTriggers(liftTask, 3);
  int pLastVal = 0;
  
  //initiate task for brain and controller displays
  vex::task display(displayTask, 4);

        Puncher.stop(vex::brakeType::coast);
        Intake.stop(vex::brakeType::coast);
        Puncher.resetRotation();
        driveCoast();
    
  while (true) {
    allRemoteFunc();  

    vex::task::sleep(20); //Sleep the task for a short amount of time to prevent wasted resources. 
  }
}

int main() {

    
    //Run the pre-autonomous function. 
    pre_auton();
    
    //Set up callbacks for autonomous and driver control periods.
    Competition.autonomous(autonomous);
    Competition.drivercontrol(usercontrol);

    //Prevent main from exiting with an infinite loop.                        
    while(true) {
      vex::task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.
    }    
       
}   